"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./utils/rssParser.ts":
/*!****************************!*\
  !*** ./utils/rssParser.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRssFeed: () => (/* binding */ fetchRssFeed)\n/* harmony export */ });\nconst fetchRssFeed = async ()=>{\n    try {\n        const response = await fetch(\"https://anchor.fm/s/f1452300/podcast/rss\");\n        const text = await response.text();\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(text, \"text/xml\");\n        const items = xmlDoc.querySelectorAll(\"item\");\n        const episodes = [];\n        items.forEach((item, index)=>{\n            var _item_querySelector, _item_querySelector1, _item_querySelector2, _item_querySelector3, _item_querySelector4;\n            const title = ((_item_querySelector = item.querySelector(\"title\")) === null || _item_querySelector === void 0 ? void 0 : _item_querySelector.textContent) || \"\";\n            const description = ((_item_querySelector1 = item.querySelector(\"description\")) === null || _item_querySelector1 === void 0 ? void 0 : _item_querySelector1.textContent) || \"\";\n            const pubDate = ((_item_querySelector2 = item.querySelector(\"pubDate\")) === null || _item_querySelector2 === void 0 ? void 0 : _item_querySelector2.textContent) || \"\";\n            // Extract episode ID from <link>\n            const link = ((_item_querySelector3 = item.querySelector(\"link\")) === null || _item_querySelector3 === void 0 ? void 0 : _item_querySelector3.textContent) || \"\";\n            const id = link.split(\"/\").pop() || \"episode-\".concat(index); // fallback to index\n            // Clean description\n            const cleanDescription = description.replace(/<\\/p>\\s*<p>/gi, '<br>') // Replace paragraph breaks with <br>\n            .replace(/<p[^>]*>/gi, '') // Remove opening <p> tags\n            .replace(/<\\/p>/gi, '') // Remove closing </p>\n            .replace(/<(?!\\/?(br|strong)\\b)[^>]*>/gi, '') // Keep <br> and <strong> tags, strip others\n            .replace(/\\n+/g, '<br />') // Convert newlines to <br />\n            .replace(/&nbsp;/g, ' '); // Normalize spaces\n            // Duration\n            let duration = \"\";\n            const durationElement = item.querySelector(\"itunes\\\\:duration\") || item.querySelector(\"*|duration\");\n            if (durationElement) {\n                duration = durationElement.textContent || \"\";\n            }\n            // Audio\n            const audioUrl = ((_item_querySelector4 = item.querySelector(\"enclosure\")) === null || _item_querySelector4 === void 0 ? void 0 : _item_querySelector4.getAttribute(\"url\")) || \"\";\n            // Image\n            const imageElement = item.querySelector(\"itunes\\\\:image\") || item.querySelector(\"*|image\");\n            const imageUrl = (imageElement === null || imageElement === void 0 ? void 0 : imageElement.getAttribute(\"href\")) || \"\";\n            // Season and Episode\n            const seasonElement = item.querySelector(\"itunes\\\\:season\") || item.querySelector(\"*|season\");\n            ;\n            const episodeNumberElement = item.querySelector(\"itunes\\\\:episode\") || item.querySelector(\"*|episode\");\n            ;\n            const season = (seasonElement === null || seasonElement === void 0 ? void 0 : seasonElement.textContent) || \"\";\n            const episodeNumber = (episodeNumberElement === null || episodeNumberElement === void 0 ? void 0 : episodeNumberElement.textContent) || \"\";\n            // Format date\n            const date = new Date(pubDate);\n            const formattedDate = new Intl.DateTimeFormat('he-IL', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            }).format(date);\n            // Format duration\n            let formattedDuration = \"0:00\";\n            if (duration && duration.trim() !== \"\") {\n                if (duration.includes(\":\") && duration.split(\":\").length === 3) {\n                    const [hours, minutes, seconds] = duration.split(\":\").map(Number);\n                    formattedDuration = \"\".concat(hours, \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(seconds.toString().padStart(2, '0'));\n                } else if (duration.includes(\":\") && duration.split(\":\").length === 2) {\n                    formattedDuration = duration;\n                } else if (!isNaN(parseInt(duration))) {\n                    const totalSeconds = parseInt(duration);\n                    const minutes = Math.floor(totalSeconds / 60);\n                    const seconds = totalSeconds % 60;\n                    formattedDuration = \"\".concat(minutes, \":\").concat(seconds.toString().padStart(2, '0'));\n                }\n            }\n            episodes.push({\n                id,\n                title,\n                description: cleanDescription,\n                duration: formattedDuration,\n                date: formattedDate,\n                spotifyLink: \"https://open.spotify.com/show/0ZpvzCEuDeKQhBw74YEmp9\",\n                audioUrl,\n                imageUrl,\n                featured: index === 0,\n                season,\n                episodeNumber\n            });\n        });\n        return episodes;\n    } catch (error) {\n        console.error(\"Error fetching RSS feed:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/rssParser.ts\n"));

/***/ })

});